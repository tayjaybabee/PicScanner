pic_scanner.gui.models.windows.main
===================================

.. py:module:: pic_scanner.gui.models.windows.main


Subpackages
-----------

.. toctree::
   :maxdepth: 1

   /autoapi/pic_scanner/gui/models/windows/main/blueprint/index


Attributes
----------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.PARENT_LOGGER
   pic_scanner.gui.models.windows.main.MOD_LOGGER
   pic_scanner.gui.models.windows.main.Window


Classes
-------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.MainWindow


Functions
---------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.flag_lock
   pic_scanner.gui.models.windows.main.make_window_template


Package Contents
----------------

.. py:function:: flag_lock(instance, flag_name)

   Context manager to set and unset a private flag attribute in an instance.

   This context manager ensures that a specified private flag attribute
   in the given instance is set to True when entering the context and
   reset to False upon exiting the context. This is useful for indicating
   that an operation is in progress within a specific scope.

   :param instance: The instance containing the private flag attribute.
   :type instance: object
   :param flag_name: The name of the flag attribute (without leading underscore).
   :type flag_name: str

   :raises AttributeError: If the instance does not have the specified private flag attribute.

   Example usage:
       handler = OperationHandler()
       with flag_lock(handler, 'flag'):
           # Perform some operation
           pass

   This will automatically set handler._flag to True within the context
   and reset it to False when exiting the context.


.. py:data:: PARENT_LOGGER

.. py:data:: MOD_LOGGER

.. py:function:: make_window_template()

.. py:data:: Window

.. py:class:: MainWindow(*args, **kwargs)

   Bases: :py:obj:`Window`, :py:obj:`pic_scanner.log_engine.Loggable`


   A metaclass to enhance classes with logging capabilities. Classes that inherit from
   'Loggable' can instantly access a logger without manually setting it up. This logger
   is derived from a parent logger, ensuring consistent logging behavior and hierarchy.

   .. attribute:: - log_device

      The logger device associated with the instance of the class.


   .. py:class:: EventHandler(window)

      Bases: :py:obj:`pic_scanner.log_engine.Loggable`


      A metaclass to enhance classes with logging capabilities. Classes that inherit from
      'Loggable' can instantly access a logger without manually setting it up. This logger
      is derived from a parent logger, ensuring consistent logging behavior and hierarchy.

      .. attribute:: - log_device

         The logger device associated with the instance of the class.


      .. py:property:: announced_start



   .. py:method:: check_index()


   .. py:method:: check_prev_button()


   .. py:method:: check_remove_button()

      Checks if the remove button should be enabled or disabled.

      If no image is selected, the button is disabled. If an image is selected, the button is
      enabled.

      :returns: None



   .. py:property:: event_handler


   .. py:property:: file_cursor


   .. py:property:: files


   .. py:method:: build()

      Builds the main window.

      :returns: PySimpleGUI.Window



   .. py:method:: close()

      Closes the window.

      This method is called when the window is closed by the user or by the program. It facilitates
      the safe closing of the window and the logging of the event. It also sets the `running` flag
      to `False`.

      :returns: None



   .. py:method:: remove_current_file()


   .. py:method:: update_remove_button_state(state: bool)

      Updates the state of the remove button.

      This method takes a boolean value and sets the 'disabled' state of the remove button to the
      opposite of that value. If this value is `True`, the button is enabled. If the value is
      `False`, the button is disabled. This method is used to enable or disable the remove button
      based on the state of the window. If no image is selected, this method will ensure the button
      remains disabled. If the user has an image selected, this method will enable the `Remove`
      button.

      :param state: The state to set the button to.
      :type state: bool

      :returns: None



   .. py:property:: active_image


   .. py:property:: file_index


   .. py:property:: setting_index
      :type: bool



