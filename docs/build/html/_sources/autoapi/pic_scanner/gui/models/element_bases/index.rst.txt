pic_scanner.gui.models.element_bases
====================================

.. py:module:: pic_scanner.gui.models.element_bases


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pic_scanner/gui/models/element_bases/blueprint/index
   /autoapi/pic_scanner/gui/models/element_bases/column/index
   /autoapi/pic_scanner/gui/models/element_bases/metas/index


Attributes
----------

.. autoapisummary::

   pic_scanner.gui.models.element_bases.PARENT_LOGGER
   pic_scanner.gui.models.element_bases.MOD_LOGGER


Classes
-------

.. autoapisummary::

   pic_scanner.gui.models.element_bases.FileCollection
   pic_scanner.gui.models.element_bases.ReactiveProperty
   pic_scanner.gui.models.element_bases.GUIFileCollection


Package Contents
----------------

.. py:class:: FileCollection(paths: List[str] = None)

   A class for managing a collection of files.

   Properties:
       paths (list):
           A list of file paths.

       total_size (int):
           The total size of the collection, in bytes.

       total_files (int):
           The total number of files in the collection.

       extensions (dict):
           A dictionary of extensions with properties for total size and number of files.

       needs_reprocessing (bool):
           A flag indicating whether the collection needs reprocessing.

   .. method:: get_total_size_in_lowest_unit

      
      Get the total size of the collection in the lowest unit.
      

   .. method:: get_total_extension_size_in_lowest_unit

      
      Get the total size of a specific extension in the lowest unit.
      

   .. method:: remove_file

      
      Remove a file from the collection.
      

   .. method:: reprocess_files

      
      Reprocess the files in the collection.
      

   .. rubric:: Examples

   >>> collection = FileCollection(paths=['/path/to/file1', '/path/to/file2'])
   >>> collection.total_size
   123456  # Total size of the collection, in bytes.


   .. py:attribute:: paths
      :type:  list


   .. py:attribute:: total_size
      :type:  int


   .. py:attribute:: total_files
      :type:  int


   .. py:attribute:: extensions
      :type:  dict


   .. py:method:: __post_init__()

      Post-initialization method for the FileCollection class.

      This method processes the files in the collection. It calculates the total size of the collection, the total number
      of files, and the total size of each extension in the collection. It populates the `total_size`, `total_files`, and
      `extensions` attributes of the class.

      :returns: None



   .. py:property:: needs_reprocessing
      :type: bool

      Returns whether the collection needs reprocessing.

      This property returns a boolean value indicating whether the collection needs reprocessing. If the collection has
      been modified since the last processing, this property will return `True`. If the collection has not been modified,
      it will return `False`. The property is read-only.

      :returns:     True if the collection needs reprocessing, False otherwise.
      :rtype: bool


   .. py:method:: _process_files()

      Process the files in the collection.

      This method processes the files in the collection. It calculates the total size of the collection, the total number
      of files, and the total size of each extension in the collection. It populates the `total_size`, `total_files`, and
      `extensions` attributes of the class.

      :returns: None



   .. py:method:: reprocess_files()

      Reprocess the files in the collection.

      This method reprocesses the files in the collection. It recalculates the total size of the collection, the total
      number of files, and the total size of each extension in the collection. It populates the `total_size`, `total_files`,
      and `extensions` attributes of the class. This method is used to update the collection after files have been added
      or removed.

      .. note::

         This method should be called after files have been added or removed from the collection. It will only reprocess
         the files if the `needs_reprocessing` attribute is set to `True`. After reprocessing, the `needs_reprocessing`
         attribute will be set to `False`.

      :returns: None



   .. py:method:: get_total_size_in_lowest_unit() -> tuple[Union[int, float], str]

      Get the total size of the collection in the lowest unit with a size greater than or equal to 1.

      This method calculates the total size of the collection in the lowest unit with a size greater than or equal
      to 1. It returns the size and the unit as a tuple. The unit is a string representing the unit of the size.

      :returns:     The total size of the collection and the unit.
      :rtype: tuple[Union[int, float], str]



   .. py:method:: get_total_extension_size_in_lowest_unit(extension: str, return_as_string: bool = False) -> tuple[Union[int, float], str]

      Get the total size of a specific extension in the lowest unit with a size greater than or equal to 1.

      :param extension: The extension to get the size of.
      :type extension: str
      :param return_as_string: A flag indicating whether to return the size as a string. If True, the size will be returned as a string
                               with the unit. If False, the size will be returned as a tuple with the size and the unit.
      :type return_as_string: bool

      :returns:     The total size of the extension and the unit.
      :rtype: tuple[Union[int, float], str]

      :raises ValueError: If the extension is not found in the collection.



   .. py:method:: remove_file(path: Union[pathlib.Path, str], **kwargs)

      Remove a file from the collection.

      This method removes a file from the collection. It takes a file path as an argument and removes the file from the
      collection. It then reprocesses the files in the collection to update the total size, total number of files, and
      total size of each extension.

      .. note::

         This method does not delete the file from the file system. It only removes the file from the collection,
         and only if the file is in the collection. If the file is not in the collection, this method will raise a
         `KeyError`. After removing the file, the collection will be reprocessed to update the total size, total number
         of files, and total size of each extension.

      :param path: The file path to remove.
      :type path: Union[Path, str]
      :param \*\*kwargs: Additional keyword arguments.

      :raises KeyError: If the file is not in the collection.

      :returns: None



   .. py:method:: __getitem__(key: Union[int, str]) -> Union[str, Dict[str, int]]


   .. py:method:: __str__()

      Return str(self).



.. py:class:: ReactiveProperty(default_value=None, callback=None, *args, **kwargs)

   .. py:method:: __set_name__(owner, name)


   .. py:method:: __get__(instance, owner)


   .. py:method:: __set__(instance, value)


   .. py:method:: add_callback(callback, *args, **kwargs)


.. py:data:: PARENT_LOGGER

.. py:data:: MOD_LOGGER

.. py:class:: GUIFileCollection(collection: pic_scanner.helpers.filesystem.classes.FileCollection)

   Bases: :py:obj:`pic_scanner.log_engine.Loggable`


   A class to manage a collection of files with a cursor to navigate through them.

   Properties:
       collection (FileCollection):
           The collection of files.

       files (list[Path]):
           List of file paths from the collection.

       cursor (int):
           Current position of the cursor in the collection.


   .. py:attribute:: cursor


   .. py:property:: collection
      :type: pic_scanner.helpers.filesystem.classes.FileCollection

      Returns the collection of files.

      :returns:     The collection of files.
      :rtype: FileCollection


   .. py:property:: files
      :type: list

      Returns the list of file paths from the collection.

      :returns:     The list of file paths.
      :rtype: list


   .. py:property:: needs_reprocessing
      :type: bool

      Returns whether the collection needs reprocessing.

      :returns:     True if the collection needs reprocessing, False otherwise.
      :rtype: bool


   .. py:method:: next() -> str

      Moves the cursor to the next file in the collection and returns it.

      :returns:     The path of the next file.
      :rtype: str



   .. py:method:: prev() -> str

      Moves the cursor to the previous file in the collection and returns it.

      :returns:     The path of the previous file.
      :rtype: str



   .. py:method:: current() -> str

      Returns the file at the current cursor position.

      :returns:     The path of the current file.
      :rtype: str



   .. py:method:: remove_current()

      Removes the file at the current cursor position.



   .. py:method:: set_cursor(index: int)

      Sets the cursor to the specified index, adjusting if out of bounds.

      :param index: The position to set the cursor to.
      :type index: int

      :raises IndexError: If the index is out of the valid range.



   .. py:method:: __getitem__(key: int) -> str

      Returns the file at the specified index.

      :param key: The index of the file to retrieve.
      :type key: int

      :returns:     The path of the file at the specified index.
      :rtype: str



   .. py:method:: add_cursor_callback(callback, *args, **kwargs)

      Adds a callback to be invoked when the cursor changes.

      :param callback: The callback function.
      :type callback: callable
      :param \*args: Additional positional arguments to pass to the callback.
      :param \*\*kwargs: Additional keyword arguments to pass to the callback.



   .. py:method:: __len__() -> int

      Returns the number of files in the collection.

      :returns:     The number of files.
      :rtype: int



