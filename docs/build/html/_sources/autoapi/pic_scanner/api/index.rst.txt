pic_scanner.api
===============

.. py:module:: pic_scanner.api


Attributes
----------

.. autoapisummary::

   pic_scanner.api.DEFAULT_BASE_URL


Functions
---------

.. autoapisummary::

   pic_scanner.api.provision_path
   pic_scanner.api.create_payload
   pic_scanner.api.make_request
   pic_scanner.api.analyze_image


Package Contents
----------------

.. py:data:: DEFAULT_BASE_URL
   :value: 'http://localhost:8080/infer'


   str:
   The default base URL for the API.

.. py:function:: provision_path(path: Union[str, pathlib.Path], do_not_expand: bool = False, do_not_resolve: bool = False, do_not_convert: bool = False) -> pathlib.Path

   Provision a path.

   :param path: The path to provision.
   :type path: str
   :param do_not_convert: A flag indicating whether to convert the path to a string.
   :type do_not_convert: bool
   :param do_not_expand: A flag indicating whether to expand the path.
   :type do_not_expand: bool
   :param do_not_resolve: A flag indicating whether to resolve the path.
   :type do_not_resolve: bool

   :returns:     The provisioned path.
   :rtype: Path


.. py:function:: create_payload(image_path: Union[str, pathlib.Path], do_not_expand: bool = False, do_not_resolve: bool = False, do_not_convert: bool = False, do_not_provision: bool = False)

   Create a payload for the request.

   :param image_path: The path to the image.
   :type image_path: str
   :param do_not_expand: A flag indicating whether to expand the path.
   :type do_not_expand: bool
   :param do_not_resolve: A flag indicating whether to resolve the path.
   :type do_not_resolve: bool
   :param do_not_convert: A flag indicating whether to convert the path to a string.
   :type do_not_convert: bool

   :returns:     The payload for the request.
   :rtype: dict

   :raises ValueError: If the path is invalid.


.. py:function:: make_request(image_path: Union[str, pathlib.Path], base_url: Optional[str] = DEFAULT_BASE_URL, do_not_expand: bool = False, do_not_resolve: bool = False, do_not_convert: bool = False, do_not_provision: bool = False)

   Make a request to the inference server.

   :param image_path: The path to the image.
   :type image_path: Union[str, Path]
   :param base_url: The base URL of the inference server.
   :type base_url: str
   :param do_not_expand: A flag indicating whether to expand the path.
   :type do_not_expand: bool
   :param do_not_resolve: A flag indicating whether to resolve the path.
   :type do_not_resolve: bool
   :param do_not_convert: A flag indicating whether to convert a string to a pathlib.Path object.
   :type do_not_convert: bool
   :param do_not_provision: A flag indicating whether to provision the path.
   :type do_not_provision: bool

   :returns:     The result of the request.
   :rtype: dict

   :raises requests.exceptions.HTTPError: If the request was unsuccessful.
   :raises ValueError: If the path is invalid.
   :raises FileNotFoundError: If the file does not exist.
   :raises PermissionError: If the file is not accessible.
   :raises IsADirectoryError: If the path is a directory.


.. py:function:: analyze_image(image_path: Union[str, pathlib.Path], base_url: Optional[str] = None, do_not_provision: bool = False, do_not_convert: bool = False, **kwargs) -> dict

   Analyze an image using the inference server.

   :param image_path: The path to the image.
   :type image_path: str
   :param base_url: The base URL of the inference server.
   :type base_url: Optional[str]

   :returns:     The result of the analysis.
   :rtype: dict


