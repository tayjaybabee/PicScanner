pic_scanner.cli.arguments
=========================

.. py:module:: pic_scanner.cli.arguments


Attributes
----------

.. autoapisummary::

   pic_scanner.cli.arguments.PROG_NAME
   pic_scanner.cli.arguments.AUTHORS
   pic_scanner.cli.arguments.PROG_DESC


Classes
-------

.. autoapisummary::

   pic_scanner.cli.arguments.BaseSubCommandHandler
   pic_scanner.cli.arguments.CommandHandler
   pic_scanner.cli.arguments.Parser


Functions
---------

.. autoapisummary::

   pic_scanner.cli.arguments.parse_version


Package Contents
----------------

.. py:function:: parse_version() -> str

   Parses the version information into a string.

   :returns: The version information.
   :rtype: str

   Since:
       v1.3.2


.. py:data:: PROG_NAME
   :value: 'IS-NSFW-Scanner'


   The name of the program.

.. py:data:: AUTHORS

   The authors of the project.

.. py:data:: PROG_DESC
   :value: 'A tool for scanning (and managing) images for NSFW content.'


   The description of the program.

.. py:class:: BaseSubCommandHandler

.. py:class:: CommandHandler(args)

.. py:class:: Parser(*args, **kwargs)

   Bases: :py:obj:`argparse.ArgumentParser`


   Object for parsing command line strings into Python objects.

   :keyword - prog -- The name of the program (default: ``os.path.basename(sys.argv[0])``)
   :keyword - usage -- A usage message (default: auto-generated from arguments)
   :keyword - description -- A description of what the program does:
   :keyword - epilog -- Text following the argument descriptions:
   :keyword - parents -- Parsers whose arguments should be copied into this one:
   :keyword - formatter_class -- HelpFormatter class for printing help messages:
   :keyword - prefix_chars -- Characters that prefix optional arguments:
   :keyword - fromfile_prefix_chars -- Characters that prefix files containing: additional arguments
   :keyword - argument_default -- The default value for all arguments:
   :keyword - conflict_handler -- String indicating how to handle conflicts:
   :keyword - add_help -- Add a -h/-help option:
   :keyword - allow_abbrev -- Allow long options to be abbreviated unambiguously:
   :keyword - exit_on_error -- Determines whether or not ArgumentParser exits with: error info when an error occurs


   .. py:method:: parse_args(*args, **kwargs)


   .. py:method:: register_subcommand(sub_command_handler: SubCommandHandler, *args, **kwargs)


