pic_scanner.helpers.properties
==============================

.. py:module:: pic_scanner.helpers.properties


Classes
-------

.. autoapisummary::

   pic_scanner.helpers.properties.ReactiveProperty
   pic_scanner.helpers.properties.FrozenProperty


Functions
---------

.. autoapisummary::

   pic_scanner.helpers.properties.freeze_property


Module Contents
---------------

.. py:class:: ReactiveProperty(default_value=None, callback=None, *args, **kwargs)

   .. py:method:: add_callback(callback, *args, **kwargs)


.. py:class:: FrozenProperty(*args, **kwargs)

   Bases: :py:obj:`inspyre_toolbox.syntactic_sweets.properties.RestrictedSetter`


   A descriptor class that restricts the setting of a property based on type, value, and custom conditions.

   This class is designed to be used as a descriptor for class properties, allowing for the definition of restrictions
   on the setting of the property. These restrictions can include type checking, value checking, and custom conditions
   that must be met for the property to be set. If any of the restrictions are violated, an exception is raised.

   The `RestrictedSetter` class also allows for the definition of an initial value for the property, which is used if
   the property has not been set. This can be useful for defining default values for properties.

   .. rubric:: Notes

   - If a `preferred_type` is specified, the value will be converted to that type if possible. If the value cannot be converted to the preferred type, a `TypeError` will be raised.

   - If a custom condition is specified, the condition must be met for the property to be set. If the condition is not met, an `UnmetConditionError` will be raised.

   - If an exception is specified, it will be raised instead of the default `UnmetConditionError` if the custom condition is not met.

   - If `allowed_values` is specified, the value must be in the set of allowed values for the property to be set. If the value is not in the set, a `ValueError` will be raised.

   - If `restrict_setter` is set to `True`, the setter can only be called within class methods. If the setter is called outside of class methods, a `PermissionError` will be raised.


.. py:function:: freeze_property(cls)

