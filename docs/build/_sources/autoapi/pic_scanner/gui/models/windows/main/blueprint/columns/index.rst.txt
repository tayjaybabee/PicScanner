pic_scanner.gui.models.windows.main.blueprint.columns
=====================================================

.. py:module:: pic_scanner.gui.models.windows.main.blueprint.columns


Attributes
----------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.blueprint.columns.gui_file_collection


Classes
-------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.blueprint.columns.GUIFileCollection
   pic_scanner.gui.models.windows.main.blueprint.columns.Column
   pic_scanner.gui.models.windows.main.blueprint.columns.FileCollection
   pic_scanner.gui.models.windows.main.blueprint.columns.ButtonSchematic
   pic_scanner.gui.models.windows.main.blueprint.columns.LeftColumn
   pic_scanner.gui.models.windows.main.blueprint.columns.FileColumn


Functions
---------

.. autoapisummary::

   pic_scanner.gui.models.windows.main.blueprint.columns.get_image_data
   pic_scanner.gui.models.windows.main.blueprint.columns.flag_lock


Package Contents
----------------

.. py:class:: GUIFileCollection(collection: pic_scanner.helpers.filesystem.classes.FileCollection)

   Bases: :py:obj:`pic_scanner.log_engine.Loggable`


   A class to manage a collection of files with a cursor to navigate through them.

   Properties:
       collection (FileCollection):
           The collection of files.

       files (list[Path]):
           List of file paths from the collection.

       cursor (int):
           Current position of the cursor in the collection.


   .. py:attribute:: cursor


   .. py:property:: collection
      :type: pic_scanner.helpers.filesystem.classes.FileCollection

      Returns the collection of files.

      :returns:     The collection of files.
      :rtype: FileCollection


   .. py:property:: files
      :type: list

      Returns the list of file paths from the collection.

      :returns:     The list of file paths.
      :rtype: list


   .. py:property:: needs_reprocessing
      :type: bool

      Returns whether the collection needs reprocessing.

      :returns:     True if the collection needs reprocessing, False otherwise.
      :rtype: bool


   .. py:method:: next() -> str

      Moves the cursor to the next file in the collection and returns it.

      :returns:     The path of the next file.
      :rtype: str



   .. py:method:: prev() -> str

      Moves the cursor to the previous file in the collection and returns it.

      :returns:     The path of the previous file.
      :rtype: str



   .. py:method:: current() -> str

      Returns the file at the current cursor position.

      :returns:     The path of the current file.
      :rtype: str



   .. py:method:: remove_current()

      Removes the file at the current cursor position.



   .. py:method:: set_cursor(index: int)

      Sets the cursor to the specified index, adjusting if out of bounds.

      :param index: The position to set the cursor to.
      :type index: int

      :raises IndexError: If the index is out of the valid range.



   .. py:method:: add_cursor_callback(callback, *args, **kwargs)

      Adds a callback to be invoked when the cursor changes.

      :param callback: The callback function.
      :type callback: callable
      :param \*args: Additional positional arguments to pass to the callback.
      :param \*\*kwargs: Additional keyword arguments to pass to the callback.



.. py:class:: Column(column_key: str, auto_build=False)

   A class for building a PySimpleGUI Column.

   This class is used to build a PySimpleGUI Column. It is a subclass of the `AutoBuildMeta` metaclass.

   Properties:
       auto_build (bool):
           A boolean value that determines whether the class should automatically build itself when
           instantiated. This is set to `False` by default. This property is read-only.

       building (bool):
           A boolean value that determines whether the class is currently building itself. This is set to `False` by
           default.

       column (psg.Column):
           The PySimpleGUI Column object. This is built from the layout, and will only have a value if the class is built.

       column_key (str):
           The key for the column. This is used to identify the column in the layout. It is set to `None` by default, and
           after instantiation it is frozen and cannot be changed.

       is_built (bool):
           A boolean value that determines whether the class has been built.

       layout (list):
           A list of elements that make up the layout of the class. This is used to build the column, and is set to
           an empty list by default.


   .. py:attribute:: column_key


   .. py:property:: auto_build
      :type: bool

      Returns the value of the `auto_build` attribute.

      The `auto_build` attribute is a boolean value that determines whether the class should automatically build itself
      when instantiated.

      :rtype: bool


   .. py:method:: build()
      :abstractmethod:



   .. py:property:: building
      Returns the value of the `building` attribute.

      The `building` attribute is a boolean value that determines whether the class is currently building itself.

      :returns:     The value of the `building` attribute.
      :rtype: bool


   .. py:property:: column
      Returns the column.

      The column is built from the layout, and will only have a value if the class is built; otherwise it will be `None`.

      :returns:     The column.
      :rtype: psg.Column


   .. py:property:: layout
      Returns the layout.

      The layout is a list of elements that make up the layout of the class. This is used to build the column, and is
      set to an empty list by default.

      :returns:     The layout.
      :rtype: list


   .. py:property:: is_built
      Returns whether the class has been built.

      :returns:     True if the class has been built, False otherwise.
      :rtype: bool


.. py:class:: FileCollection(paths: List[str] = None)

   A class for managing a collection of files.

   Properties:
       paths (list):
           A list of file paths.

       total_size (int):
           The total size of the collection, in bytes.

       total_files (int):
           The total number of files in the collection.

       extensions (dict):
           A dictionary of extensions with properties for total size and number of files.

       needs_reprocessing (bool):
           A flag indicating whether the collection needs reprocessing.

   .. method:: get_total_size_in_lowest_unit

      
      Get the total size of the collection in the lowest unit.
      

   .. method:: get_total_extension_size_in_lowest_unit

      
      Get the total size of a specific extension in the lowest unit.
      

   .. method:: remove_file

      
      Remove a file from the collection.
      

   .. method:: reprocess_files

      
      Reprocess the files in the collection.
      

   .. rubric:: Examples

   >>> collection = FileCollection(paths=['/path/to/file1', '/path/to/file2'])
   >>> collection.total_size
   123456  # Total size of the collection, in bytes.


   .. py:attribute:: paths
      :type:  list


   .. py:attribute:: total_size
      :type:  int


   .. py:attribute:: total_files
      :type:  int


   .. py:attribute:: extensions
      :type:  dict


   .. py:property:: needs_reprocessing
      :type: bool

      Returns whether the collection needs reprocessing.

      This property returns a boolean value indicating whether the collection needs reprocessing. If the collection has
      been modified since the last processing, this property will return `True`. If the collection has not been modified,
      it will return `False`. The property is read-only.

      :returns:     True if the collection needs reprocessing, False otherwise.
      :rtype: bool


   .. py:method:: reprocess_files()

      Reprocess the files in the collection.

      This method reprocesses the files in the collection. It recalculates the total size of the collection, the total
      number of files, and the total size of each extension in the collection. It populates the `total_size`, `total_files`,
      and `extensions` attributes of the class. This method is used to update the collection after files have been added
      or removed.

      .. note::

         This method should be called after files have been added or removed from the collection. It will only reprocess
         the files if the `needs_reprocessing` attribute is set to `True`. After reprocessing, the `needs_reprocessing`
         attribute will be set to `False`.

      :returns: None



   .. py:method:: get_total_size_in_lowest_unit() -> tuple[Union[int, float], str]

      Get the total size of the collection in the lowest unit with a size greater than or equal to 1.

      This method calculates the total size of the collection in the lowest unit with a size greater than or equal
      to 1. It returns the size and the unit as a tuple. The unit is a string representing the unit of the size.

      :returns:     The total size of the collection and the unit.
      :rtype: tuple[Union[int, float], str]



   .. py:method:: get_total_extension_size_in_lowest_unit(extension: str, return_as_string: bool = False) -> tuple[Union[int, float], str]

      Get the total size of a specific extension in the lowest unit with a size greater than or equal to 1.

      :param extension: The extension to get the size of.
      :type extension: str
      :param return_as_string: A flag indicating whether to return the size as a string. If True, the size will be returned as a string
                               with the unit. If False, the size will be returned as a tuple with the size and the unit.
      :type return_as_string: bool

      :returns:     The total size of the extension and the unit.
      :rtype: tuple[Union[int, float], str]

      :raises ValueError: If the extension is not found in the collection.



   .. py:method:: remove_file(path: Union[pathlib.Path, str], **kwargs)

      Remove a file from the collection.

      This method removes a file from the collection. It takes a file path as an argument and removes the file from the
      collection. It then reprocesses the files in the collection to update the total size, total number of files, and
      total size of each extension.

      .. note::

         This method does not delete the file from the file system. It only removes the file from the collection,
         and only if the file is in the collection. If the file is not in the collection, this method will raise a
         `KeyError`. After removing the file, the collection will be reprocessed to update the total size, total number
         of files, and total size of each extension.

      :param path: The file path to remove.
      :type path: Union[Path, str]
      :param \*\*kwargs: Additional keyword arguments.

      :raises KeyError: If the file is not in the collection.

      :returns: None



.. py:function:: get_image_data(file_or_bytes: Union[str, bytes], maxsize: Tuple[int, int] = (1200, 850)) -> bytes

   Get image data from a file or a bytes object.

   This function opens an image file or a bytes object, resizes it to fit within the given maximum size,
   and returns the image data in PNG format as bytes.

   :param file_or_bytes: The path to the image file or a bytes object containing the image data.
   :type file_or_bytes: Union[str, bytes]
   :param maxsize: The maximum size of the image as a (width, height) tuple. Default is (1200, 850).
   :type maxsize: Tuple[int, int], optional

   :returns: The image data as a byte-string object in PNG format.
   :rtype: bytes

   :raises FileNotFoundError: If the specified file does not exist.
   :raises OSError: If the file cannot be opened and identified as an image file.
   :raises ValueError: If the input bytes object cannot be decoded into an image.


.. py:function:: flag_lock(instance, flag_name)

   Context manager to set and unset a private flag attribute in an instance.

   This context manager ensures that a specified private flag attribute
   in the given instance is set to True when entering the context and
   reset to False upon exiting the context. This is useful for indicating
   that an operation is in progress within a specific scope.

   :param instance: The instance containing the private flag attribute.
   :type instance: object
   :param flag_name: The name of the flag attribute (without leading underscore).
   :type flag_name: str

   :raises AttributeError: If the instance does not have the specified private flag attribute.

   Example usage:
       handler = OperationHandler()
       with flag_lock(handler, 'flag'):
           # Perform some operation
           pass

   This will automatically set handler._flag to True within the context
   and reset it to False when exiting the context.


.. py:class:: ButtonSchematic(text: str, auto_build=False, key: str = None, create_disabled=False, create_hidden=False, skip_enforcing_unique_keys=False, **kwargs)

   Bases: :py:obj:`pic_scanner.log_engine.Loggable`


   A metaclass to enhance classes with logging capabilities. Classes that inherit from
   'Loggable' can instantly access a logger without manually setting it up. This logger
   is derived from a parent logger, ensuring consistent logging behavior and hierarchy.

   .. attribute:: - log_device

      The logger device associated with the instance of the class.


   .. py:attribute:: instances


   .. py:attribute:: built_instances


   .. py:attribute:: DEFAULT_SUFFIX
      :value: 'button'



   .. py:attribute:: suffix


   .. py:method:: has_key(key: str, case_sensitive=False, return_instance=False) -> Union[bool, ButtonSchematic, None]
      :classmethod:


      Checks if the class instances dictionary contains the provided key with optional case sensitivity and instance return.

      :param key: The key to check in the `ButtonSchematic.instances` dictionary.
      :type key: str
      :param case_sensitive: Whether the key comparison should be case-sensitive. Default is False.
      :type case_sensitive: bool
      :param return_instance: Whether to return the instance corresponding to the key. Default is False.
      :type return_instance: bool

      :returns:     - If return_instance is False: True if the key is present in the instances dictionary, False otherwise.
                    - If return_instance is True: The instance corresponding to the key, or None if the key is not found.
      :rtype: Union[bool, 'ButtonSchematic', None]

      .. rubric:: Examples

      >>> ButtonSchematic.has_key('MY_BUTTON')
      False

      >>> ButtonSchematic.has_key('MY_BUTTON', case_sensitive=True)
      True

      >>> ButtonSchematic.has_key('MY_BUTTON', return_instance=True)
      None

      >>> ButtonSchematic.has_key('MY_BUTTON', case_sensitive=True, return_instance=True)
      <ButtonSchematic object at 0x000001>



   .. py:method:: get_instance(key: str, default=None, case_sensitive=False) -> 'ButtonSchematic' or None
      :classmethod:


      Returns an instance from the class instances dictionary based on the provided key.

      :param key: The key to look up in the `ButtonSchematic.instances` dictionary.
      :type key: str
      :param default: The default value to return if the key is not found. Default is None.
      :param case_sensitive: Whether the key lookup should be case-sensitive. Default is False.
      :type case_sensitive: bool

      :returns: The instance corresponding to the key, or the default value if the key is not found.

      .. rubric:: Examples

      >>> ButtonSchematic.get_instance('MY_BUTTON')
      None

      >>> ButtonSchematic.get_instance('MY_BUTTON', default='DEFAULT')
      'DEFAULT'

      >>> ButtonSchematic.get_instance('MY_BUTTON', default='DEFAULT', case_sensitive=True)
      None



   .. py:method:: check_key(key: str, case_sensitive=False) -> bool
      :classmethod:


      Check if the key is in the `ButtonSchematic.instances` dictionary.

      :param key: The key to check in the `ButtonSchematics.instances` dictionary.
      :type key: str
      :param case_sensitive: Whether the key comparison should be case-sensitive. Default is False.
      :type case_sensitive: bool

      :returns:     True if the key is in the instances dictionary, False otherwise.
      :rtype: bool

      .. rubric:: Examples

      >>> ButtonSchematic.check_key('MY_BUTTON')
      False

      >>> ButtonSchematic.check_key('MY_BUTTON', case_sensitive=True)
      True



   .. py:method:: build()

      Build the button.

      Building the button will create the button object and store it in the `ButtonSchematic.instances` dictionary.

      :returns: None



   .. py:method:: disable()

      Disables the button.

      :returns: None



   .. py:method:: enable()

      Enables the button.

      :returns: None



   .. py:method:: hide()

      Hides the button.

      :returns: None



   .. py:method:: unhide()

      Unhides the button.

      :returns: None



   .. py:method:: update(**kwargs)

      Updates the button.

      :returns: None



   .. py:property:: auto_build
      Whether the button should be built automatically.

      :returns:     True if the button should be built automatically, False otherwise.
      :rtype: bool

      .. rubric:: Examples

      >>> button = ButtonSchematic('My Button')
      >>> button.auto_build
      False


   .. py:property:: built
      Whether the button has been built.

      :returns:     True if the button has been built, False otherwise.
      :rtype: bool


   .. py:property:: button
      :type: Button or None

      The PySimpleGUI button object.


   .. py:property:: create_disabled
      :type: bool

      Whether the button should be created in a disabled state.

      :returns:     True if the button should be created in a disabled state, False otherwise.
      :rtype: bool


   .. py:property:: create_hidden
      Whether the button should be created in a hidden state.

      :returns:     True if the button should be created in a hidden state, False otherwise.
      :rtype: bool


   .. py:property:: disabled
      Whether the button is disabled.

      :returns:     True if the button is disabled, False otherwise.
      :rtype: bool


   .. py:property:: enabled
      Whether the button is enabled.

      :returns:     True if the button is enabled, False otherwise.
      :rtype: bool


   .. py:property:: enforce_unique_keys
      Whether to enforce unique keys for buttons.

      :returns:     True if unique keys are enforced, False otherwise.
      :rtype: bool


   .. py:property:: hidden


   .. py:property:: key
      The key for the button.

      :returns:     The key for the button.
      :rtype: str


   .. py:property:: state
      Returns a `Box` object containing the state of the button, including whether it is enabled
      and visible.

      :returns:     A `Box` object with the button's state attributes.
      :rtype: Box

      .. rubric:: Examples

      >>> button = ButtonSchematic('My Button')
      >>> button.state
      {'enabled': False, 'visible': False}


   .. py:property:: text
      :type: str

      The text for display on the button.

      :returns:     The text for the button.
      :rtype: str


   .. py:property:: visible
      Whether the button is visible.

      :returns:     True if the button is visible, False otherwise.
      :rtype: bool


.. py:data:: gui_file_collection
   :value: None


.. py:class:: LeftColumn(file_collection: pic_scanner.helpers.filesystem.classes.FileCollection, **kwargs)

   Bases: :py:obj:`pic_scanner.gui.models.element_bases.column.Column`


   A class that represents the left column of the main window.

   Properties:
       file_collection (FileCollection):
           The collection of files.

       file_list_box (psg.Listbox):
           The listbox displaying the file names.

       file_names (list[str]):
           The list of file names.

       next_button (psg.Button):
           The button to go to the next file.

       file_num_display_elem (psg.Text):
           The element displaying the current file number.

       prev_button (psg.Button):
           The button to go to the previous file.

       remove_button (psg.Button):
           The button to remove the current image.


   .. py:attribute:: instances
      :value: []



   .. py:property:: file_collection
      Gets the file collection.

      :returns:     The collection of files.
      :rtype: FileCollection


   .. py:property:: file_list_box
      Gets the file list box.

      :returns:     The listbox displaying the file names.
      :rtype: psg.Listbox


   .. py:property:: file_names
      Gets the file names.

      :returns:     The list of file names.
      :rtype: list[str]


   .. py:property:: next_button
      Gets the next button.


      :returns:     The button to go to the next file.
      :rtype: psg.Button


   .. py:property:: file_num_display_elem
      Gets the file number display element.

      :returns:     The element displaying the current file number.
      :rtype: psg.Text


   .. py:property:: prev_button
      Gets the previous button.

      :returns:     The button to go to the previous file.
      :rtype: psg.Button


   .. py:property:: remove_button
      Gets the remove button.

      :returns:     The button to remove the current image.
      :rtype: psg.Button


   .. py:method:: build()

      Builds the left column layout.

      :returns: The column layout.
      :rtype: psg.Column



.. py:class:: FileColumn(file_path, **kwargs)

   Bases: :py:obj:`pic_scanner.gui.models.element_bases.column.Column`


   A class for building a PySimpleGUI Column.

   This class is used to build a PySimpleGUI Column. It is a subclass of the `AutoBuildMeta` metaclass.

   Properties:
       auto_build (bool):
           A boolean value that determines whether the class should automatically build itself when
           instantiated. This is set to `False` by default. This property is read-only.

       building (bool):
           A boolean value that determines whether the class is currently building itself. This is set to `False` by
           default.

       column (psg.Column):
           The PySimpleGUI Column object. This is built from the layout, and will only have a value if the class is built.

       column_key (str):
           The key for the column. This is used to identify the column in the layout. It is set to `None` by default, and
           after instantiation it is frozen and cannot be changed.

       is_built (bool):
           A boolean value that determines whether the class has been built.

       layout (list):
           A list of elements that make up the layout of the class. This is used to build the column, and is set to
           an empty list by default.


   .. py:property:: building
      :type: bool

      Returns the value of the `building` attribute.

      The `building` attribute is a boolean value that determines whether the class is currently building itself.

      :returns:     The value of the `building` attribute.
      :rtype: bool


   .. py:property:: changing_image
      :type: bool



   .. py:property:: file_name_display_elem
      :type: pic_scanner.gui.models.element_bases.column.psg.Text



   .. py:property:: file_path
      :type: pathlib.Path

      A property that returns the file path.

      :rtype: Path


   .. py:property:: gui_file_collection


   .. py:property:: image_elem
      :type: pic_scanner.gui.models.element_bases.column.psg.Image

      A property that returns the image element.

      :returns: The image element.


   .. py:method:: build() -> pic_scanner.gui.models.element_bases.column.psg.Column

      Builds the column.

      This method builds the column by creating the layout and column elements and setting the
      `is_built ` attribute to `True`.

      :returns: The column.



   .. py:method:: change_image(new_path: Union[pathlib.Path, str, int]) -> None

      Changes the image displayed in the column.

      This method changes the image displayed in the column to the image located at the path and
      updates the file name display element to show the new file name.

      :param new_path: The new path to the image.
      :type new_path: Path



