pic_scanner.helpers.filesystem
==============================

.. py:module:: pic_scanner.helpers.filesystem

.. autoapi-nested-parse::

   __init__.py

   The filesystem module provides functions for working with the filesystem.

   This module provides functions for checking if a path is valid, checking if a directory is valid, checking if a file is
   valid, provisioning a path, provisioning a list of paths, gathering files in a directory, and getting the abbreviation
   for a storage unit.

   Functions:
       check_path:
           Check if a path is valid.

       check_directory:
           Check if a directory is valid.

       check_file:
           Check if a file is valid.

       provision_path:
           Provision a path.

       provision_paths:
           Provision a list of paths.

       gather_files_in_dir:
           Gather all files in a directory.

       get_storage_unit_abbreviation:
           Get the abbreviation for a storage unit.


   Since:
       1.0



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pic_scanner/helpers/filesystem/classes/index
   /autoapi/pic_scanner/helpers/filesystem/units/index


Functions
---------

.. autoapisummary::

   pic_scanner.helpers.filesystem.check_path
   pic_scanner.helpers.filesystem.check_directory
   pic_scanner.helpers.filesystem.check_file
   pic_scanner.helpers.filesystem.provision_path


Package Contents
----------------

.. py:function:: check_path(path: Union[str, pathlib.Path], do_not_expand: bool = False, do_not_resolve: bool = False, do_not_convert: bool = False, do_not_provision: bool = False) -> bool

   Check if a path is valid.

   This function checks if a path is valid. If the path is a string, it will be converted to a Path object. If the path
   is not expanded, it will be expanded. If the path is not resolved, it will be resolved. If the path is not converted
   to a string, it will be converted to a string. If the path is not provisioned, it will be provisioned.

   .. note:: Provisioning a path involves converting it to a Path object, expanding it, and resolving it.

   :param path: The path to check.
   :type path: Union[str, Path]
   :param do_not_expand: A flag indicating whether to expand the path.
   :type do_not_expand: bool
   :param do_not_resolve: A flag indicating whether to resolve the path.
   :type do_not_resolve: bool
   :param do_not_convert: A flag indicating whether to convert the path to a string.
   :type do_not_convert: bool
   :param do_not_provision: A flag indicating whether to provision the path.
   :type do_not_provision: bool

   :returns:     A flag indicating whether the path is valid.
   :rtype: bool


.. py:function:: check_directory(path: Union[str, pathlib.Path], **kwargs) -> bool

   Check if a directory is valid.

   This function checks if a directory is valid. If the path is a string, it will be converted to a Path object. If the
   path is not expanded, it will be expanded. If the path is not resolved, it will be resolved. If the path is not
   converted to a string, it will be converted to a string. If the path is not provisioned, it will be provisioned.

   .. note:: Provisioning a path involves converting it to a Path object, expanding it, and resolving it.

   :param path: The directory to check.
   :type path: Union[str, Path]
   :param \*\*kwargs: Additional keyword arguments.

   :returns:     A flag indicating whether the directory is valid.
   :rtype: bool


.. py:function:: check_file(path: Union[str, pathlib.Path], **kwargs) -> bool

   Check if a file is valid.

   :param path: The file to check.
   :type path: Union[str, Path]

   :returns:     A flag indicating whether the file is valid.
   :rtype: bool


.. py:function:: provision_path(path: Union[str, pathlib.Path], do_not_expand: bool = False, do_not_resolve: bool = False, do_not_convert: bool = False) -> pathlib.Path

   Provision a path.

   :param path: The path to provision.
   :type path: str
   :param do_not_convert: A flag indicating whether to convert the path to a string.
   :type do_not_convert: bool
   :param do_not_expand: A flag indicating whether to expand the path.
   :type do_not_expand: bool
   :param do_not_resolve: A flag indicating whether to resolve the path.
   :type do_not_resolve: bool

   :returns:     The provisioned path.
   :rtype: Path


