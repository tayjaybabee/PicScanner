pic_scanner.helpers.images
==========================

.. py:module:: pic_scanner.helpers.images


Attributes
----------

.. autoapisummary::

   pic_scanner.helpers.images.PARENT_LOGGER
   pic_scanner.helpers.images.MOD_LOGGER


Functions
---------

.. autoapisummary::

   pic_scanner.helpers.images.draw_bounding_boxes
   pic_scanner.helpers.images.get_image_data


Module Contents
---------------

.. py:data:: PARENT_LOGGER

.. py:data:: MOD_LOGGER

.. py:function:: draw_bounding_boxes(image_path, concerns, box_color=(255, 0, 0), text_color=(255, 255, 255), save_path=None, save_annotated=False)

   Draw bounding boxes around areas of concern in an image.

   :param image_path: The path to the image.
   :type image_path: str
   :param concerns: The areas of concern in the image.
   :type concerns: list
   :param save_path: The path to save the annotated image.
   :type save_path: str
   :param save_annotated: A flag indicating whether to save the annotated image.
   :type save_annotated: bool

   :returns:     The image with the bounding boxes drawn.
   :rtype: Image


.. py:function:: get_image_data(file_or_bytes: Union[str, bytes], maxsize: Tuple[int, int] = (1200, 850)) -> bytes

   Get image data from a file or a bytes object.

   This function opens an image file or a bytes object, resizes it to fit within the given maximum size,
   and returns the image data in PNG format as bytes.

   :param file_or_bytes: The path to the image file or a bytes object containing the image data.
   :type file_or_bytes: Union[str, bytes]
   :param maxsize: The maximum size of the image as a (width, height) tuple. Default is (1200, 850).
   :type maxsize: Tuple[int, int], optional

   :returns: The image data as a byte-string object in PNG format.
   :rtype: bytes

   :raises FileNotFoundError: If the specified file does not exist.
   :raises OSError: If the file cannot be opened and identified as an image file.
   :raises ValueError: If the input bytes object cannot be decoded into an image.


