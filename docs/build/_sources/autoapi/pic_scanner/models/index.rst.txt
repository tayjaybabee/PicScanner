pic_scanner.models
==================

.. py:module:: pic_scanner.models


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pic_scanner/models/concern/index
   /autoapi/pic_scanner/models/image/index


Classes
-------

.. autoapisummary::

   pic_scanner.models.ScannedImage
   pic_scanner.models.ScannedImageCollection
   pic_scanner.models.Concern


Functions
---------

.. autoapisummary::

   pic_scanner.models.create_scanned_image
   pic_scanner.models.get_description


Package Contents
----------------

.. py:class:: ScannedImage(image_path: Union[str, pathlib.Path])

   A class representing a scanned image.

   Properties:
       image_path (str, Path):
           The path of the image.

       backed_up (bool):
           The backup status of the image.

       concerns (list):
           The list of concerns associated with the image.

       concern_count (int):
           The number of concerns associated with the image.

       concern_names (list):
           The names of the concerns associated with the image.

   .. method:: add_concern(concern)

      
      Add a concern to the scanned image.
      

   .. method:: backup(backup_dir, backup_name, **kwargs)

      
      Backup the image.
      

   .. method:: create_concerns(result)

      
      Create concerns from a result dictionary.
      

   .. method:: get_concerns()

      
      Get the concerns associated with the image.
      

   .. method:: get_concerns_by_name(name)

      
      Get the concerns associated with the image by name.
      

   .. method:: has_concern(name, case_sensitive)

      
      Check if the image has a concern.
      

   .. method:: move(new_dir, new_name)

      
      Move the image to a new directory.
      


   .. py:attribute:: image_path


   .. py:property:: backed_up
      :type: bool

      Get the backed up status of the image.

      :returns:     The backed up status of the image.
      :rtype: bool


   .. py:property:: concerns
      Get the concerns associated with the image.

      :returns:     The concerns associated with the image.
      :rtype: list


   .. py:property:: concern_count
      Get the number of concerns associated with the image.

      :returns:     The number of concerns associated with the image.
      :rtype: int


   .. py:property:: concern_names
      Get the names of the concerns associated with the image.

      :rtype: list


   .. py:method:: add_concern(concern)

      Add a concern to the scanned image.

      :param concern: The concern to add to the scanned image.
      :type concern: Concern

      :returns: None



   .. py:method:: backup(backup_dir=None, backup_name=None, **kwargs)

      Backup the scanned image.

      :param backup_dir: The directory to store the backup.
      :type backup_dir: str, Path
      :param backup_name: The name of the backup file.
      :type backup_name: str

      :returns:     The path of the backup file.
      :rtype: Path



   .. py:method:: create_concerns(result)

      Create concerns from a result dictionary.

      :param result: The result dictionary.
      :type result: dict

      :returns: None



   .. py:method:: get_concerns()

      Get the concerns associated with the image.

      :returns:     The concerns associated with the image.
      :rtype: list



   .. py:method:: get_concerns_by_name(name)

      Get the concerns associated with the image by name.

      :param name: The name of the concern.
      :type name: str

      :returns:     The concerns associated with the image by name.
      :rtype: list



   .. py:method:: has_concern(name, case_sensitive=False)

      Check if the image has a concern by name.

      :param name: The name of the concern.
      :type name: str
      :param case_sensitive: If the check should be case sensitive.
      :type case_sensitive: bool

      :returns:     True if the image has the concern, False otherwise.
      :rtype: bool



   .. py:method:: move(new_dir, new_name=None)

      Move the image to a new directory.

      :param new_dir: The new directory to move the image to.
      :type new_dir: str
      :param new_name: The new name of the image.
      :type new_name: str

      :returns: None



.. py:class:: ScannedImageCollection

   A class representing a collection of scanned images.

   Properties:
       images (list):
           The list of scanned images.

       concern_names (list):
           The names of the concerns associated with the images in the collection.

       concerns (list):
           The concerns associated with the images in the collection.

       concern_count (int):
           The number of concerns associated with the images in the collection.

       image_count (int):
           The number of images in the collection.

       image_paths (list):
           The paths of the images in the collection.


   .. py:method:: add_image(image: ScannedImage)

      Add a scanned image to the collection.

      :param image: The scanned image to add to the collection.
      :type image: ScannedImage

      :returns: None



   .. py:method:: remove_image(image)

      Remove a scanned image from the collection.

      :param image: The scanned image to remove from the collection.
      :type image: ScannedImage

      :returns: None



   .. py:method:: get_all_with_concern(concern_name: str, case_sensitive=False)

      Get all images with a specific concern.

      :param concern_name: The name of the concern.
      :type concern_name: str
      :param case_sensitive: If the check should be case-sensitive.
      :type case_sensitive: bool

      :returns:     A list of images with the concern.
      :rtype: list



   .. py:method:: get_image(image_path)

      Get a scanned image from the collection by path.

      :param image_path: The path of the scanned image.
      :type image_path: str, Path

      :returns:     The scanned image.
      :rtype: ScannedImage



   .. py:method:: get_concerns()

      Get the concerns associated with the images in the collection.

      :returns:     The concerns associated with the images in the collection.
      :rtype: list



   .. py:method:: get_concerns_by_name(name)

      Get the concerns associated with the images in the collection by name.

      :param name: The name of the concern.
      :type name: str

      :returns:     The concerns associated with the images in the collection by name.
      :rtype: list



   .. py:method:: get_concerns_by_score(score)

      Get concerns by score.

      :param score: The score of the concern.

      :returns:     A list of concerns with the given score.
      :rtype: list



   .. py:method:: get_concern_names()

      Get the names of the concerns associated with the images in the collection.

      :returns:     The names of the concerns associated with the images in the collection.
      :rtype: list



   .. py:method:: move_all_with_concern(new_dir, concern_name)

      Move all images with a specific concern to a new directory.

      :param new_dir: The new directory to move the images to.
      :type new_dir: str, Path
      :param concern_name: The name of the concern.
      :type concern_name: str

      :returns: None



   .. py:property:: concern_names
      Get the names of the concerns associated with the images in the collection.

      :returns:     The names of the concerns associated with the images in the collection.
      :rtype: list


   .. py:property:: concerns
      Get the concerns associated with the images in the collection.

      :returns:     The concerns associated with the images in the collection.
      :rtype: list


   .. py:property:: concern_count
      Get the number of concerns associated with the images in the collection.

      :returns:     The number of concerns associated with the images in the collection.
      :rtype: int


   .. py:property:: image_count
      Get the number of images in the collection.

      :returns:     The number of images in the collection.
      :rtype: int


   .. py:property:: image_paths
      Get the paths of the images in the collection.

      :returns:     The paths of the images in the collection.
      :rtype: list


.. py:function:: create_scanned_image(result_struct)

   Create a scanned image from a result dictionary.

   :param result_struct: The result dictionary.
   :type result_struct: dict

   :returns:     The scanned image.
   :rtype: ScannedImage


.. py:function:: get_description(class_name)

   Get the description of a label.

   :param class_name: The name of the label.
   :type class_name: str

   :returns:     The description of the label.
   :rtype: str


.. py:class:: Concern(name: str, score: float, location: list[int], description: Optional[str] = None)

   A class detailing a NSFW concern (or 'detection') found on an image.

   .. attribute:: name

      The name of the concern.

   .. attribute:: score

      The score of the concern.

   .. attribute:: location

      The location of the concern.

   .. attribute:: description

      The description of the concern.


   .. py:attribute:: name


   .. py:attribute:: score


   .. py:attribute:: location


   .. py:attribute:: description


   .. py:method:: __str__()

      Return a string representation of the concern.

      :returns:     The string representation of the concern.
      :rtype: str



   .. py:method:: __repr__()

      Return a string representation of the concern.

      :returns:     The string representation of the concern.
      :rtype: str



